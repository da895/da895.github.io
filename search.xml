<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Shell总结(整理)]]></title>
    <url>%2F2018%2F03%2F15%2FShell%E6%80%BB%E7%BB%93-%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[简介Shell各方面的编程内容总结下来并不断更新，以便以后使用时查询。 详解Shell输出不换行 实现类echo的简单硬输出，不自动加换行符。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#将脚本接收的参数作为一个串($@或$*)处理,并去掉尾部可能存在的换行符(\n） #!/bin/bash echo -n &quot;$*&quot; #方法一：-n参数,输出脚本参数,强制不换行 printf &quot;%s&quot; &quot;$*&quot; #方法二：格式化输出命令printf,格式串无换行 echo &quot;$*&quot; | tr -d &apos;\n&apos; #方法三：转换/删除命令tr,-d删除字符集中的字符 echo &quot;$*&quot; | awk &apos;&#123;printf(&quot;%s&quot;, $0)&#125;&apos; #方法四：模式-命令指令awk ``` ### 创建shell脚本库 创建shell脚本库library.sh（里面仅包括各种自定义的函数封装，因非函数引入时会执行）。在其他的脚本中需要使用库中函数时加入语句source ./library.sh，其中./library.sh是库的相对路径。并且source的缩写是&quot;.&quot;，因此等价. ./library.sh。然后就可以按正常方式调用库中的函数了。 ### shell特殊变量 $0 ：当前脚本的文件名 $num ：num为从1开始的数字，$1是第一个参数，$2是第二个参数，$&#123;10&#125;是第十个参数 $# ：传入脚本的参数的个数 $* ：所有的位置参数(作为单个字符串) $@ ：所有的位置参数(每个都作为独立的字符串)。 $? ：当前shell进程中，上一个命令的返回值，如果上一个命令成功执行则$?的值为0，否则为其他非零值，常用做if语句条件 $$ ：当前shell进程的pid $! ：后台运行的最后一个进程的pid $- ：显示shell使用的当前选项 $_ ：之前命令的最后一个参数 ### svn提交代码 `$svn st | grep &apos;^[AMD]&apos; | cut -c 9- | xargs svn ci -m &quot;commit&quot;` ### 递归清除.SVN文件 `find . -name &quot;.svn&quot; | xargs rm -rf ` ### Shell符号&lt;&lt;&lt; (Here Document) [Here Document](http://www.tldp.org/LDP/abs/html/x17837.html) 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下 ``` cmd &lt;&lt; delimiter Here Document Contentdelimiter``` 三个小于号的语法：command [args] &lt;&lt;&lt;[&quot;]$word[&quot;]；$word会展开并作为command的stdin。 例如： echo &quot;abc123&quot; | cracklib-check等价于cracklib-check &lt;&lt;&lt; &quot;abc123&quot; echo &quot;abc123&quot; | passwd root --stdin等价于passwd root &lt;&lt;&lt; &quot;abc123&quot; 注意事项： ``` EOF只是一个标识而已,可以替换成任意的合法字符(约定大于配置); 作为结尾的delimiter一定要顶格写,前面不能有任何字符; 作为结尾的delimiter后面也不能有任何的字符(包括空格!!!); 作为起始的delimiter前后的空格会被省略掉; ``` ### Shell比较判断 ``` [ -a FILE ] 如果 FILE 存在则为真。 [ -b FILE ] 如果 FILE 存在且是一个块特殊文件则为真。 [ -c FILE ] 如果 FILE 存在且是一个字特殊文件则为真。 [ -d FILE ] 如果 FILE 存在且是一个目录则为真。 [ -e FILE ] 如果 FILE 存在则为真。 [ -f FILE ] 如果 FILE 存在且是一个普通文件则为真。 [ -g FILE ] 如果 FILE 存在且已经设置了SGID则为真。 [ -h FILE ] 如果 FILE 存在且是一个符号连接则为真。 [ -k FILE ] 如果 FILE 存在且已经设置了粘制位则为真。 [ -p FILE ] 如果 FILE 存在且是一个名字管道(F如果O)则为真。 [ -r FILE ] 如果 FILE 存在且是可读的则为真。 [ -s FILE ] 如果 FILE 存在且大小不为0则为真。 [ -t FD ] 如果文件描述符 FD 打开且指向一个终端则为真。 [ -u FILE ] 如果 FILE 存在且设置了SUID (set user ID)则为真。 [ -w FILE ] 如果 FILE 如果 FILE 存在且是可写的则为真。 [ -x FILE ] 如果 FILE 存在且是可执行的则为真。 [ -O FILE ] 如果 FILE 存在且属有效用户ID则为真。 [ -G FILE ] 如果 FILE 存在且属有效用户组则为真。 [ -L FILE ] 如果 FILE 存在且是一个符号连接则为真。 [ -N FILE ] 如果 FILE 存在 and has been mod如果ied since it was last read则为真。 [ -S FILE ] 如果 FILE 存在且是一个套接字则为真。 [ FILE1 -nt FILE2 ] 如果 FILE1 has been changed more recently than FILE2, or 如果 FILE1 exists and FILE2 does not则为真。 [ FILE1 -ot FILE2 ] 如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真。 [ FILE1 -ef FILE2 ] 如果 FILE1 和 FILE2 指向相同的设备和节点号则为真。 [ -o OPTIONNAME ] 如果 shell选项 “OPTIONNAME” 开启则为真。 [ -z STRING ] “STRING” 的长度为零则为真。 [ -n STRING ] or [ STRING ] “STRING” 的长度为非零 non-zero则为真。 [ STRING1 == STRING2 ] 如果2个字符串相同。 “=” may be used instead of “==” for strict POSIX compliance则为真。 [ STRING1 != STRING2 ] 如果字符串不相等则为真。 [ STRING1 &lt; STRING2 ] 如果 “STRING1” sorts before “STRING2” lexicographically in the current locale则为真。 [ STRING1 &gt; STRING2 ] 如果 “STRING1” sorts after “STRING2” lexicographically in the current locale则为真。 [ ARG1 OP ARG2 ] “OP” is one of -eq, -ne, -lt, -le, -gt or -ge. These arithmetic binary operators return true if “ARG1” is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to “ARG2”, respectively. “ARG1” and “ARG2” are integers. if [[ $a != 1 &amp;&amp; $a != 2 ]] 如果是&amp;&amp;、||、&lt;和&gt;，必须使用在[[ ]]条件判断结构中，等价与if [ $a -ne 1] &amp;&amp; [ $a != 2 ]或if [ $a -ne 1 -a $a != 2 ] ``` 转载自： http://blog.csdn.net/taiyang1987912/article/details/40372789```]]></content>
  </entry>
  <entry>
    <title><![CDATA[ubuntu-openvpn]]></title>
    <url>%2F2018%2F03%2F14%2Fubuntu-openvpn%2F</url>
    <content type="text"><![CDATA[First, install the OpenVPN Network Manager plugin: sudo apt-get install network-manager-openvpn Open Network Manager, click “Add” and from the opened window select “Import a saved VPN configuration…” under “Choose a Connection Type”. Navigate to your .ovpn file (~jrg/Documents/vpn-config.ovpn). If it doesn’t automatically find your certificates/keys (the paths of which are found in the .ovpn file), you can select them here, or make any other small changes. One other thing that may save you some headache down the road is to click IPv4 Settings, then change the method to “Automatic (VPN) Addresses Only”. When kept at the default, this will cause ALL internet traffic to go over the VPN, regardless of your .ovpn settings. Here you can also set the DNS server and search domains to use while connected.Must be set DNS server!! transport from https://askubuntu.com/questions/187511/how-can-i-use-a-ovpn-file-with-network-manager]]></content>
      <categories>
        <category>internet</category>
      </categories>
      <tags>
        <tag>transport</tag>
        <tag>internet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo迁移重装]]></title>
    <url>%2F2018%2F03%2F13%2Fhexo%E8%BF%81%E7%A7%BB%E9%87%8D%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Hexo属于静态博客，不像WordPress等具有后台系统，可以在任意平台直接使用。而Hexo此类没有统一的后台管理，在换了系统，或者换了电脑，都需要重新安装一下，包括一些配置，如果手动复制迁移，很容易产生错误，因为很多东西不支持直接复制。因此下面记录自己的迁移方式，还是很简单的。 我们一般需要备份或者需要恢复的一般有三部分: source文件夹内的博客原文，以及一些自己新建的页面，比如about页面 themes文件夹下的主题 配置文件: _config.yml 其余部分，每次hexo init都一样，我们没有必要备份。 备份主要方式就是使用一些在线仓库存储。如github, coding(提供私人仓库)。 主题首先是对主题的迁移。我们一般选定了某个主题，一般都会做一点自定义的改变，比如某些css等，这时候可以先fork到自己的github，每次做了修改，直接push到自己的repo上，下次迁移的时候，直接clone自己修改的主题即可。 source文件夹&amp;&amp;配置文件 这个涉及到了一些私人配置文件，例如博客源文件，以及如_config.yml内的涉及到帐号等私人配置，这个时候，需要备份到私人云上，国内的coding.net免费提供了私人repo，可以使用。这样我们就只需在博客的根目录建立一个repo即可，然后提交source文件夹以及_config.yml即可。新写了博客的话，也只需要提交push到repo即可，十分方便。 迁移重装在换了机器或者系统的时候，需要重新安装Hexo,安装好node.js和git之后，只需执行一条命令安装: npm install hexo-cli -g 之后新建一个hexo博客: hexo init blog 下面开始恢复备份: 1. 从github上恢复主题到themes文件夹 2. 从私人repo上克隆source文件夹和_config.yml 3. 安装所需的插件:一般有hexo-deploy-git,hexo-generator-feed等等 之后用hexo g 和hexo s 本地测试，没问题的话，直接hexo d发布 本文链接: http://shomy.top/2017/01/27/hexo-migrate-solution/非商业转载请注明作者及出处。商业转载请联系作者本人。]]></content>
      <categories>
        <category>transport</category>
      </categories>
      <tags>
        <tag>transport</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Anaconda入门使用指南]]></title>
    <url>%2F2018%2F03%2F12%2FAnaconda%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[打算学习 Python 来做数据分析的你，是不是在开始时就遇到各种麻烦呢？ 到底该装 Python2 呢还是 Python3 ？ 为什么安装 Python 时总是出错？ 怎么安装工具包呢？ 为什么提示说在安装这个工具前必须先安装一堆其他不明所以的工具？ 相信大多数 Python 的初学者们都曾为环境问题而头疼不已，但你并不孤独，大家都是这么折腾过来的。为了在入门时少走弯路，并且让高涨的积极性不至于太受打击，这里推荐使用 Anaconda 来管理你的安装环境和各种工具包。 本文介绍了Anaconda的使用，全文大纲如下： 为什么选择 Anaconda 什么是 Anaconda 什么是 conda Anaconda 的优点 如何安装 Anaconda 如何管理 Python 包 如何管理 Python 环境 添加清华镜像站 一、为什么选择Anaconda？1.1 什么是 Anaconda？Anaconda是专注于数据分析的Python发行版本，包含了conda、Python等190多个科学包及其依赖项。作为好奇宝宝的你是不是发现了一个新名词 conda，那么你一定会问 conda 又是什么呢？ 1.2 什么是 conda ？conda 是开源包（packages）和虚拟环境（environment）的管理系统。 packages 管理： 可以使用 conda 来安装、更新 、卸载工具包 ，并且它更关注于数据科学相关的工具包。在安装 anaconda 时就预先集成了像 Numpy、Scipy、 pandas、Scikit-learn 这些在数据分析中常用的包。另外值得一提的是，conda 并不仅仅管理Python的工具包，它也能安装非python的包。比如在新版的 Anaconda 中就可以安装R语言的集成开发环境 Rstudio。 虚拟环境管理： 在conda中可以建立多个虚拟环境，用于隔离不同项目所需的不同版本的工具包，以防止版本上的冲突。对纠结于 Python 版本的同学们，我们也可以建立 Python2 和 Python3 两个环境，来分别运行不同版本的 Python 代码。 知道是什么（what） 的同时，我们也需要问一问 为什么（why）。那么，为什么要选择用Anaconda呢？ 1.3 Anaconda 的优点？Anaconda的优点总结起来就八个字：省时省心、分析利器。 * 省时省心： Anaconda通过管理工具包、开发环境、Python版本，大大简化了你的工作流程。不仅可以方便地安装、更新、卸载工具包，而且安装时能自动安装相应的依赖包，同时还能使用不同的虚拟环境隔离不同要求的项目。 * 分析利器： 在 [Anaconda](https://www.anaconda.com/what-is-anaconda/) 官网中是这么宣传自己的：适用于企业级大数据分析的Python工具。其包含了720多个数据科学相关的开源包，在数据可视化、机器学习、深度学习等多方面都有涉及。不仅可以做数据分析，甚至可以用在大数据和人工智能领域。 解决了 是什么 以及 为什么 的问题后，下面让我们看一下 怎么做（How）。 二、如何安装Anaconda？可以从这里 下载 Anaconda 的安装程序以及查看安装说明。无论是 Windows、Linux 还是 MAC 的 OSX 系统，都可以找到对应的安装软件。如果你的电脑是64位则尽量选64位版本。至于 Python 的版本是 2.7 还是 3.x，这里推荐你使用 Python3，因为 Python2 终将停止维护。可能目前市面上大多数教程使用的都还是 Python2，这也不用着急，因为在 Anaconda 中可以同时管理两个 Python 版本的环境。 根据提示进行安装，完成后你大概会惊讶地发现电脑中多了好多应用，不用担心，我们一项项来看： Anaconda Navigator ：用于管理工具包和环境的图形用户界面，后续涉及的众多管理命令也可以在 Navigator 中手工实现。 Jupyter notebook ：基于web的交互式计算环境，可以编辑易于人们阅读的文档，用于展示数据分析的过程。 qtconsole ：一个可执行 IPython 的仿终端图形界面程序，相比 Python Shell 界面，qtconsole 可以直接显示代码生成的图形，实现多行代码输入执行，以及内置许多有用的功能和函数。 spyder ：一个使用Python语言、跨平台的、科学运算集成开发环境。 安装完成后，我们还需要对所有工具包进行升级，以避免可能发生的错误。打开你电脑的终端，在命令行中输入： conda upgrade --all 在终端询问是否安装如下升级版本时，输入 y。 有的情况下，你可能会遇到找不到 conda 命令的错误提示，这很可能是环境路径设置的问题，需要添加conda环境变量：export PATH=xxx/anaconda/bin:$PATH (tcsh: setenv PATH &quot;xxx/anaconda2/bin:$PATH&quot;), 其中xxx替换成anaconda的安装路径。 至此，安装完成，下面让我们看一下如何用 Anaconda 管理工具包和环境。 三、如何管理Python包？安装一个 package： conda install package_name 这里 package_name 是需要安装包的名称。你也可以同时安装多个包，比如同时安装numpy 、scipy 和 pandas，则执行如下命令： conda install numpy scipy pandas 你也可以指定安装的版本，比如安装 1.1 版本的 numpy ： conda install numpy=1.10 移除一个 package： conda remove package_name 升级 package 版本： conda update package_name 查看所有的 packages： conda list 如果你记不清 package 的具体名称，也可以进行模糊查询： conda search search_term 四、如何管理Python环境？默认的环境是 root，你也可以创建一个新环境： conda create -n env_name list of packages 其中 -n 代表 name，env_name 是需要创建的环境名称，list of packages 则是列出在新环境中需要安装的工具包。 例如，当我安装了 Python3 版本的 Anaconda 后，默认的 root 环境自然是 Python3，但是我还需要创建一个 Python 2 的环境来运行旧版本的 Python 代码，最好还安装了 pandas 包，于是我们运行以下命令来创建： conda create -n py2 python=2.7 pandas 细心的你一定会发现，py2 环境中不仅安装了 pandas，还安装了 numpy 等一系列 packages，这就是使用 conda 的方便之处，它会自动为你安装相应的依赖包，而不需要你一个个手动安装。 进入名为 env_name 的环境： source activate env_name 退出当前环境： source deactivate 另外注意，在 Windows 系统中，使用 activate env_name 和 deactivate 来进入和退出某个环境。 (tcsh 不支持 activate 和 deactivate, 可以在anaconda-navigate里面切换env_name) 删除名为 env_name 的环境： conda env remove -n env_name 显示所有的环境： conda env list 当分享代码的时候，同时也需要将运行环境分享给大家，执行如下命令可以将当前环境下的 package 信息存入名为 environment 的 YAML 文件中。 conda env export &gt; environment.yaml 同样，当执行他人的代码时，也需要配置相应的环境。这时你可以用对方分享的 YAML 文件来创建一摸一样的运行环境。 conda env create -f environment.yaml 至此，你已跨入 Anaconda 的大门，后续就可以徜徉在 Python 的海洋中了。 五、添加清华镜像站Anaconda 安装包可以到 https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ 下载。 TUNA 还提供了 Anaconda 仓库的镜像，运行以下命令: conda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config –set show_channel_urls yes 即可添加 Anaconda Python 免费仓库。 运行 conda install numpy 测试一下吧。 祝学习愉快！ 注：本文代码示例参考自Udacity数据分析课程之Anaconda章节。 如果你想Python写出风格优美的文章，请参考左手程序员，右手作家：你必须会的Jupyter Notebook 如果你想用Python做一些数据分析，但不知道怎么开始，请参考系列文章Python数据分析的起手式 作者：鱼心DrFish链接：https://www.jianshu.com/p/169403f7e40c來源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。]]></content>
      <categories>
        <category>transport</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>transport</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随记]]></title>
    <url>%2F2018%2F03%2F03%2Fwith-mind%2F</url>
    <content type="text"><![CDATA[业精于勤荒于嬉，行成于思毁于随 当你犹豫不决时，别人已经在行动了！ 再不好的时候也不要放弃，冷静下来，肯定还有机会！ 遇到自己能做且感兴趣的事，还是能废寝忘食的做下去 –手工大王制作 每天哪怕只走一小步，也比走五步退三步强！]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. How to setupPls refer to Github + Hexo 系列教材 Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Reminder duoshuo comments is closed. Recommend to disqus wiki for hexo-theme-next hexo 使用攻略– 分类与标签Plus +++ 在我们编辑文章的时候，直接在categories:项填写属于哪个分类，但如果分类是中文的时候，路径也会包含中文。比如分类我们设置的是： 1categories: 编程 那在生成页面后，分类列表就会出现编程这个选项，他的访问路径是： 1*/categories/编程 如果我们想要把路径名和分类名分别设置，需要怎么办呢？ 打开根目录下的配置文件_config.yml，找到如下位置做更改： 1234567# Category &amp; Tagdefault_category: uncategorizedcategory_map: 编程: programming 生活: life 其他: othertag_map: hexo 后台管理工具–”hexo-admin” 详细资料请参见官网 安装 npm install –save hexo-adminhexo serveropen http://localhost:4000/admin/ 使用 先在setting界面设置好账号密码，然后将其拷贝到_config.yml即可。 hexo 插件安装与卸载 hexo安装xxx插件 npm install xxx –save hexo卸载xxx插件 npm uninstall xxx 测试github ssh -T git@github.com 解决Hexo置顶问题 $ npm uninstall hexo-generator-index --save $ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top: true即可。 Github: https://github.com/netcan/hexo-generator-index-pin-top]]></content>
      <categories>
        <category>internet</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
